import java.util.Scanner;

public class SistemaTienda {
    // ========== CONSTANTES DEL SISTEMA ==========
    // N√∫mero m√°ximo de productos que puede almacenar la tienda
    private static final int CAPACIDAD_INVENTARIO = 100;
    // Opci√≥n para salir del men√∫
    private static final int OPCION_SALIR = 6;
    
    // ========== VARIABLES GLOBALES (Arreglos) ==========
    // Arreglo para almacenar los c√≥digos √∫nicos de cada producto
    private static String[] codigosProductos = new String[CAPACIDAD_INVENTARIO];
    // Arreglo para almacenar los nombres de los productos
    private static String[] nombresProductos = new String[CAPACIDAD_INVENTARIO];
    // Arreglo para almacenar el precio de cada producto
    private static double[] preciosProductos = new double[CAPACIDAD_INVENTARIO];
    // Arreglo para almacenar la cantidad disponible de cada producto
    private static int[] cantidadesProductos = new int[CAPACIDAD_INVENTARIO];
    // Contador que indica cu√°ntos productos est√°n registrados actualmente
    private static int totalProductos = 0;
    
    // Arreglo para registrar las ventas realizadas
    private static double[] ventasRegistradas = new double[500];
    // Contador de cu√°ntas ventas se han realizado
    private static int totalVentas = 0;
    
    public static void main(String[] args) {
        // ========== INICIALIZACI√ìN DEL SISTEMA ==========
        Scanner entrada = new Scanner(System.in);
        // Variable para controlar si se debe continuar en el men√∫ principal
        boolean sistemaActivo = true;
        
        // Mensaje de bienvenida del sistema
        mostrarBienvenida();
        
        // ========== BUCLE PRINCIPAL DEL SISTEMA ==========
        // Estructura de control: Iterativa (Bucle while)
        // Se ejecuta mientras el usuario no elija salir
        while (sistemaActivo) {
            // Muestra el men√∫ principal y obtiene la opci√≥n del usuario
            int opcionUsuario = mostrarMenuPrincipal(entrada);
            
            // Estructura de control: Condicional (switch-case)
            // Ejecuta diferentes acciones seg√∫n la opci√≥n seleccionada
            switch (opcionUsuario) {
                case 1:
                    // Opci√≥n: Agregar un nuevo producto al inventario
                    agregarProducto(entrada);
                    break;
                case 2:
                    // Opci√≥n: Mostrar todos los productos registrados
                    mostrarInventario();
                    break;
                case 3:
                    // Opci√≥n: Realizar una venta de productos
                    realizarVenta(entrada);
                    break;
                case 4:
                    // Opci√≥n: Buscar un producto por c√≥digo
                    buscarProducto(entrada);
                    break;
                case 5:
                    // Opci√≥n: Ver el reporte de ventas del d√≠a
                    mostrarReporteVentas();
                    break;
                case 6:
                    // Opci√≥n: Salir del sistema
                    sistemaActivo = false;
                    System.out.println("\nüëã ¬°Hasta luego! Gracias por usar el sistema.");
                    break;
                default:
                    // Si el usuario ingresa una opci√≥n no v√°lida
                    System.out.println("‚ùå Opci√≥n no v√°lida. Intenta de nuevo.");
            }
        }
        
        // Cierra el Scanner para liberar recursos
        entrada.close();
    }
    
    // ========== M√âTODO: Mostrar Bienvenida ==========
    // M√©todo: Se ejecuta una sola vez al iniciar el programa
    // Prop√≥sito: Mostrar un mensaje de bienvenida al usuario
    private static void mostrarBienvenida() {
        System.out.println("‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó");
        System.out.println("‚ïë     SISTEMA DE GESTI√ìN DE TIENDA        ‚ïë");
        System.out.println("‚ïë          Versi√≥n 1.0 - 2025            ‚ïë");
        System.out.println("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù");
        System.out.println();
    }
    
    // ========== M√âTODO: Mostrar Men√∫ Principal ==========
    // Par√°metro: Scanner entrada (para recibir la opci√≥n del usuario)
    // Retorna: int (la opci√≥n seleccionada por el usuario)
    // Prop√≥sito: Mostrar el men√∫ y obtener la opci√≥n del usuario
    private static int mostrarMenuPrincipal(Scanner entrada) {
        System.out.println("\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê");
        System.out.println("‚îÇ          MEN√ö PRINCIPAL                 ‚îÇ");
        System.out.println("‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§");
        System.out.println("‚îÇ 1. Agregar nuevo producto               ‚îÇ");
        System.out.println("‚îÇ 2. Mostrar inventario completo          ‚îÇ");
        System.out.println("‚îÇ 3. Realizar una venta                   ‚îÇ");
        System.out.println("‚îÇ 4. Buscar un producto                   ‚îÇ");
        System.out.println("‚îÇ 5. Ver reporte de ventas                ‚îÇ");
        System.out.println("‚îÇ 6. Salir del sistema                    ‚îÇ");
        System.out.println("‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò");
        System.out.print("Selecciona una opci√≥n: ");
        
        // Obtiene la opci√≥n ingresada por el usuario
        int opcion = entrada.nextInt();
        entrada.nextLine(); // Limpia el buffer de entrada
        return opcion;
    }
    
    // ========== M√âTODO: Agregar Producto ==========
    // Par√°metro: Scanner entrada (para recibir datos del producto)
    // Prop√≥sito: Agregar un nuevo producto al inventario
    private static void agregarProducto(Scanner entrada) {
        // Verifica que no se haya alcanzado la capacidad m√°xima del inventario
        if (totalProductos >= CAPACIDAD_INVENTARIO) {
            System.out.println("‚ùå El inventario est√° lleno. No se pueden agregar m√°s productos.");
            return;
        }
        
        System.out.println("\nüì¶ --- AGREGAR NUEVO PRODUCTO ---");
        
        // Solicita el c√≥digo del producto
        System.out.print("Ingresa el c√≥digo del producto: ");
        String codigo = entrada.nextLine();
        
        // Valida que el c√≥digo no est√© duplicado
        if (buscarIndiceProducto(codigo) != -1) {
            System.out.println("‚ùå Error: Ya existe un producto con ese c√≥digo.");
            return;
        }
        
        // Solicita el nombre del producto
        System.out.print("Ingresa el nombre del producto: ");
        String nombre = entrada.nextLine();
        
        // Solicita el precio del producto
        System.out.print("Ingresa el precio unitario: $");
        double precio = entrada.nextDouble();
        
        // Valida que el precio sea v√°lido (no negativo)
        if (precio < 0) {
            System.out.println("‚ùå Error: El precio no puede ser negativo.");
            return;
        }
        
        // Solicita la cantidad inicial disponible
        System.out.print("Ingresa la cantidad disponible: ");
        int cantidad = entrada.nextInt();
        entrada.nextLine(); // Limpia el buffer
        
        // Valida que la cantidad sea v√°lida (no negativa)
        if (cantidad < 0) {
            System.out.println("‚ùå Error: La cantidad no puede ser negativa.");
            return;
        }
        
        // Almacena los datos del producto en los arreglos
        codigosProductos[totalProductos] = codigo;
        nombresProductos[totalProductos] = nombre;
        preciosProductos[totalProductos] = precio;
        cantidadesProductos[totalProductos] = cantidad;
        
        // Incrementa el contador de productos
        totalProductos++;
        
        // Mensaje de confirmaci√≥n
        System.out.println("‚úÖ Producto agregado exitosamente!");
    }
    
    // ========== M√âTODO: Mostrar Inventario ==========
    // Prop√≥sito: Mostrar todos los productos registrados en el sistema
    private static void mostrarInventario() {
        // Verifica que haya al menos un producto registrado
        if (totalProductos == 0) {
            System.out.println("\n‚ö†Ô∏è  El inventario est√° vac√≠o.");
            return;
        }
        
        System.out.println("\nüì¶ --- INVENTARIO ACTUAL ---");
        System.out.println("‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê");
        System.out.println("‚îÇ #  ‚îÇ C√≥digo    ‚îÇ Nombre              ‚îÇ Precio   ‚îÇ Cantidad    ‚îÇ");
        System.out.println("‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§");
        
        // Estructura de control: Iterativa (Bucle for)
        // Recorre todos los productos para mostrarlos
        for (int i = 0; i < totalProductos; i++) {
            // Usa printf para alinear los datos en columnas
            System.out.printf("‚îÇ %-2d ‚îÇ %-9s ‚îÇ %-19s ‚îÇ $%-7.2f ‚îÇ %-11d ‚îÇ\n",
                    (i + 1),
                    codigosProductos[i],
                    nombresProductos[i],
                    preciosProductos[i],
                    cantidadesProductos[i]);
        }
        
        System.out.println("‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò");
        
        // Calcula y muestra el valor total del inventario
        double valorTotal = calcularValorInventario();
        System.out.printf("üí∞ Valor total del inventario: $%.2f\n", valorTotal);
    }
    
    // ========== M√âTODO: Realizar Venta ==========
    // Par√°metro: Scanner entrada (para recibir datos de la venta)
    // Prop√≥sito: Procesar una venta de productos
    private static void realizarVenta(Scanner entrada) {
        System.out.println("\nüí≥ --- REALIZAR VENTA ---");
        
        // Solicita el c√≥digo del producto a vender
        System.out.print("Ingresa el c√≥digo del producto: ");
        String codigo = entrada.nextLine();
        
        // Busca el √≠ndice del producto en los arreglos
        int indice = buscarIndiceProducto(codigo);
        
        // Verifica que el producto exista
        if (indice == -1) {
            System.out.println("‚ùå Error: Producto no encontrado.");
            return;
        }
        
        // Muestra los detalles del producto
        System.out.println("\nüì¶ Producto encontrado:");
        System.out.println("   Nombre: " + nombresProductos[indice]);
        System.out.println("   Precio: $" + preciosProductos[indice]);
        System.out.println("   Cantidad disponible: " + cantidadesProductos[indice]);
        
        // Solicita la cantidad a vender
        System.out.print("\nIngresa la cantidad a vender: ");
        int cantidadVenta = entrada.nextInt();
        entrada.nextLine(); // Limpia el buffer
        
        // Valida que la cantidad sea v√°lida
        if (cantidadVenta <= 0) {
            System.out.println("‚ùå Error: La cantidad debe ser mayor a cero.");
            return;
        }
        
        // Valida que haya stock suficiente
        if (cantidadVenta > cantidadesProductos[indice]) {
            System.out.println("‚ùå Error: No hay suficiente stock.");
            System.out.println("   Stock disponible: " + cantidadesProductos[indice]);
            return;
        }
        
        // Calcula el monto total de la venta
        double montoVenta = cantidadVenta * preciosProductos[indice];
        
        // Reduce la cantidad disponible del producto
        cantidadesProductos[indice] -= cantidadVenta;
        
        // Registra la venta en el arreglo de ventas
        ventasRegistradas[totalVentas] = montoVenta;
        totalVentas++;
        
        // Muestra el resumen de la venta
        System.out.println("\n‚úÖ --- VENTA REALIZADA ---");
        System.out.printf("   Cantidad: %d unidades\n", cantidadVenta);
        System.out.printf("   Precio unitario: $%.2f\n", preciosProductos[indice]);
        System.out.printf("   TOTAL: $%.2f\n", montoVenta);
        System.out.println("   Stock restante: " + cantidadesProductos[indice]);
    }
    
    // ========== M√âTODO: Buscar Producto ==========
    // Par√°metro: Scanner entrada (para recibir el c√≥digo a buscar)
    // Prop√≥sito: Buscar un producto espec√≠fico por su c√≥digo
    private static void buscarProducto(Scanner entrada) {
        System.out.println("\nüîç --- BUSCAR PRODUCTO ---");
        System.out.print("Ingresa el c√≥digo del producto: ");
        String codigo = entrada.nextLine();
        
        // Busca el √≠ndice del producto
        int indice = buscarIndiceProducto(codigo);
        
        // Verifica si el producto existe
        if (indice == -1) {
            System.out.println("‚ùå Producto no encontrado.");
            return;
        }
        
        // Muestra los detalles del producto encontrado
        System.out.println("\n‚úÖ --- PRODUCTO ENCONTRADO ---");
        System.out.println("   C√≥digo: " + codigosProductos[indice]);
        System.out.println("   Nombre: " + nombresProductos[indice]);
        System.out.printf("   Precio: $%.2f\n", preciosProductos[indice]);
        System.out.println("   Cantidad disponible: " + cantidadesProductos[indice]);
    }
    
    // ========== M√âTODO: Mostrar Reporte de Ventas ==========
    // Prop√≥sito: Mostrar estad√≠sticas de las ventas realizadas
    private static void mostrarReporteVentas() {
        // Verifica que se hayan realizado ventas
        if (totalVentas == 0) {
            System.out.println("\n‚ö†Ô∏è  No hay ventas registradas a√∫n.");
            return;
        }
        
        System.out.println("\nüìä --- REPORTE DE VENTAS ---");
        
        // Variables para almacenar c√°lculos
        double ventaTotal = 0;
        double ventaMaxima = ventasRegistradas[0];
        double ventaMinima = ventasRegistradas[0];
        
        // Estructura de control: Iterativa (Bucle for)
        // Recorre todas las ventas para calcular estad√≠sticas
        for (int i = 0; i < totalVentas; i++) {
            // Suma todas las ventas
            ventaTotal += ventasRegistradas[i];
            
            // Encuentra la venta m√°s alta
            if (ventasRegistradas[i] > ventaMaxima) {
                ventaMaxima = ventasRegistradas[i];
            }
            
            // Encuentra la venta m√°s baja
            if (ventasRegistradas[i] < ventaMinima) {
                ventaMinima = ventasRegistradas[i];
            }
        }
        
        // Calcula el promedio de ventas
        double ventaPromedio = ventaTotal / totalVentas;
        
        // Muestra las estad√≠sticas
        System.out.println("‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê");
        System.out.printf("‚îÇ Total de ventas: %-20d ‚îÇ\n", totalVentas);
        System.out.printf("‚îÇ Venta total: $%-24.2f ‚îÇ\n", ventaTotal);
        System.out.printf("‚îÇ Venta promedio: $%-22.2f ‚îÇ\n", ventaPromedio);
        System.out.printf("‚îÇ Venta m√°xima: $%-23.2f ‚îÇ\n", ventaMaxima);
        System.out.printf("‚îÇ Venta m√≠nima: $%-23.2f ‚îÇ\n", ventaMinima);
        System.out.println("‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò");
    }
    
    // ========== M√âTODO AUXILIAR: Buscar √çndice de Producto ==========
    // Par√°metro: String codigo (el c√≥digo del producto a buscar)
    // Retorna: int (el √≠ndice del producto en los arreglos, o -1 si no existe)
    // Prop√≥sito: Buscar un producto en los arreglos por su c√≥digo
    private static int buscarIndiceProducto(String codigo) {
        // Estructura de control: Iterativa (Bucle for)
        // Recorre todos los productos buscando el c√≥digo
        for (int i = 0; i < totalProductos; i++) {
            // equals() compara si dos String son id√©nticos
            if (codigosProductos[i].equals(codigo)) {
                return i; // Retorna el √≠ndice si encuentra el producto
            }
        }
        return -1; // Retorna -1 si no encuentra el producto
    }
    
    // ========== M√âTODO AUXILIAR: Calcular Valor del Inventario ==========
    // Retorna: double (el valor total del inventario)
    // Prop√≥sito: Calcular cu√°nto dinero hay invertido en inventario
    private static double calcularValorInventario() {
        // Variable acumuladora para sumar el valor de todos los productos
        double valorTotal = 0;
        
        // Estructura de control: Iterativa (Bucle for)
        // Recorre todos los productos
        for (int i = 0; i < totalProductos; i++) {
            // Suma el precio por cantidad de cada producto
            valorTotal += preciosProductos[i] * cantidadesProductos[i];
        }
        
        return valorTotal;
    }
}